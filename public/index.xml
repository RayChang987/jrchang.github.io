<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Ray&#39;s blog</title>
    <link>http://localhost:1313/jrchang.github.io/</link>
    <description>Recent content on Ray&#39;s blog</description>
    <generator>Hugo -- 0.129.0</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Aug 2024 22:04:05 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/jrchang.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TUPC 2024 心得</title>
      <link>http://localhost:1313/jrchang.github.io/docs/tupc2024/</link>
      <pubDate>Thu, 01 Aug 2024 22:04:05 +0800</pubDate>
      <guid>http://localhost:1313/jrchang.github.io/docs/tupc2024/</guid>
      <description>開賽沒幾分鐘， @廂閎 施 就發現pB是大水題。我打開pD發現可以直接爆搜，但第一次實作沒弄好，只好讓 @廂閎 施先來寫pB，沒過多久他就寫過了。 @張睿麟Jovi 發現這次沒有pI，只要少寫一題一定很慘。
我繼續寫D的爆搜，但還是寫不好，其實有點緊張。 這時候發現pA是簽到題，直接寫掉。@廂閎 施 發現pC是dp，於是只好又換 @廂閎 施 上來寫，不到10分鐘他又寫完了==。這時候又更緊張了一點，因為我看的pD, pE, pF一題都沒寫出來，感覺我很搞。冷靜下來後，pD終於實作完成了。再來pE只是一個簡單的分治，但題目要求了兩種表示法，要寫得東西比較多，於是又弄了很久，才把pE給寫完(penalty*1)。我pE上機了超級久， @張睿麟Jovi @廂閎 施 同時大談pG, pH。至於pF，在開題目的時，就看出這是max-minimum flow裸題，但我從來沒有寫過，只好根據我的理解寫寫看，結果沒意外TLE了。(我超爛)
這時候時間大概還有30~40分鐘，我們有兩個選擇，把pF修成TLE，或是寫pG或pH。跟 @張睿麟Jovi 討論過後，發現pH太難了，pF我又修不好， @張睿麟Jovi @廂閎 施 就開始跟我解釋pG的題目，發現可以用convex hull來解決，而且convex hull在我們的code book上面(為什麼==)。我把演算法實作完之後，過了範測，但當時其他edge cases沒有考慮很清楚，交了一堆WA(penalty*5)。 時間剩下五分鐘，@張睿麟Jovi 發現有一行continue的註解沒打開，應該要打開才對，我聽他的把註解打開，然後一邊說”不可能啦我們交過完全一樣的程式碼欸”，下一秒，就AC了。只能說，沒有 @張睿麟Jovi 我們一定超慘。
雖然只是區域賽的子賽，但也化解了一點沒有在高中選擇競技程式的遺憾，也兌現了之前打CF一小段時間的努力。最後，感謝我的隊友 @張睿麟Jovi 和 @廂閎 施 ，團練都有到，跟當初說得一樣。 好險@廂閎 施 一直叫我去比賽，不然我甚至可能今天都不比了。</description>
    </item>
    <item>
      <title>ICCAD2023 心得</title>
      <link>http://localhost:1313/jrchang.github.io/docs/iccad2023/</link>
      <pubDate>Thu, 28 Sep 2023 19:30:42 +0800</pubDate>
      <guid>http://localhost:1313/jrchang.github.io/docs/iccad2023/</guid>
      <description>我們的起步緩慢，在Alpha Test(一個初步測試結果的活動)甚至沒有繳出成績。沒有繳出成績其實很有趣，這時候會開始懷疑到底是方法不對，或是還沒把這個方法做到透徹。因此常常要做決定，選擇換方法，繼續開發，或選擇放棄某一些狀況，進而獲取另一部分的成功。做選擇對我來說十分困難，想寫出最接近完美的演算法，在各種情況下都能產生出最佳解，不願意放棄每一種可能性。但同時時間也再慢慢消失，讓每一次的失敗挫折感更重。
先求有再求好變成了Alpha test的目標，實作以快速寫完為考量。很快，在經歷了更換架構，放棄一些最佳化之後，有了初步的結果。透過閱讀過去的論文、嘗試、分析、整合，最終得到一點成果。 我們來不及參與Alpha test外，大部分隊伍的結果都比我們的好，我們的初始結果甚至無法列入排名。
再來就是永無止盡的不斷把結果變得更好，與老師討論，修正我們的錯誤。優化進行了一個多月，迎來了Beta Test(另一個測試結果的活動)，我們終於能位居前幾名。
得到Beta Test的結果後，當時想做的優化也近乎完成了。從此開始每一步都異常困難，光是找到還可以進步的地方就得做許多實驗測試，進步的幅度也開始從原本的5%~10%變成了1%~2%，花費的時間和得到的結果更不成正比。沒有辦法假設其他參賽者都做到了什麼程度，只能不斷的在上千行程式碼中不斷找機會。每當看到機會，就投入去應證。在沒有希望的時候，會缺乏動力去做更多的實驗和測試，用「說不定這個方法只能做到這樣」的心態去忽視一些可能性。</description>
    </item>
  </channel>
</rss>
