<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>心得 on Ray&#39;s blog</title>
    <link>http://localhost:1313/jrchang.github.io/tags/%E5%BF%83%E5%BE%97/</link>
    <description>Recent content in 心得 on Ray&#39;s blog</description>
    <generator>Hugo -- 0.129.0</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Aug 2024 22:04:05 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/jrchang.github.io/tags/%E5%BF%83%E5%BE%97/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TUPC 2024 心得</title>
      <link>http://localhost:1313/jrchang.github.io/docs/tupc2024/</link>
      <pubDate>Thu, 01 Aug 2024 22:04:05 +0800</pubDate>
      <guid>http://localhost:1313/jrchang.github.io/docs/tupc2024/</guid>
      <description>開賽沒幾分鐘， @廂閎 施 就發現pB是大水題。我打開pD發現可以直接爆搜，但第一次實作沒弄好，只好讓 @廂閎 施先來寫pB，沒過多久他就寫過了。 @張睿麟Jovi 發現這次沒有pI，只要少寫一題一定很慘。
我繼續寫D的爆搜，但還是寫不好，其實有點緊張。 這時候發現pA是簽到題，直接寫掉。@廂閎 施 發現pC是dp，於是只好又換 @廂閎 施 上來寫，不到10分鐘他又寫完了==。這時候又更緊張了一點，因為我看的pD, pE, pF一題都沒寫出來，感覺我很搞。冷靜下來後，pD終於實作完成了。再來pE只是一個簡單的分治，但題目要求了兩種表示法，要寫得東西比較多，於是又弄了很久，才把pE給寫完(penalty*1)。我pE上機了超級久， @張睿麟Jovi @廂閎 施 同時大談pG, pH。至於pF，在開題目的時，就看出這是max-minimum flow裸題，但我從來沒有寫過，只好根據我的理解寫寫看，結果沒意外TLE了。(我超爛)
這時候時間大概還有30~40分鐘，我們有兩個選擇，把pF修成TLE，或是寫pG或pH。跟 @張睿麟Jovi 討論過後，發現pH太難了，pF我又修不好， @張睿麟Jovi @廂閎 施 就開始跟我解釋pG的題目，發現可以用convex hull來解決，而且convex hull在我們的code book上面(為什麼==)。我把演算法實作完之後，過了範測，但當時其他edge cases沒有考慮很清楚，交了一堆WA(penalty*5)。 時間剩下五分鐘，@張睿麟Jovi 發現有一行continue的註解沒打開，應該要打開才對，我聽他的把註解打開，然後一邊說”不可能啦我們交過完全一樣的程式碼欸”，下一秒，就AC了。只能說，沒有 @張睿麟Jovi 我們一定超慘。
雖然只是區域賽的子賽，但也化解了一點沒有在高中選擇競技程式的遺憾，也兌現了之前打CF一小段時間的努力。最後，感謝我的隊友 @張睿麟Jovi 和 @廂閎 施 ，團練都有到，跟當初說得一樣。 好險@廂閎 施 一直叫我去比賽，不然我甚至可能今年也不比了。</description>
    </item>
    <item>
      <title>ICCAD Contest 2023 Problem B  心得</title>
      <link>http://localhost:1313/jrchang.github.io/docs/iccad2023/</link>
      <pubDate>Thu, 28 Sep 2023 19:30:42 +0800</pubDate>
      <guid>http://localhost:1313/jrchang.github.io/docs/iccad2023/</guid>
      <description>當時看到這個比賽，覺得有一點像是Atcoder的heuristic contest，好像很好玩的樣子，就找了 @楷傑 林 和 @Ice Frost 一起參加。正好前一陣子用了GA寫數獨，我以為這跟數獨一樣好玩(?)。
我們的起步緩慢，前期嘗(失)試(拜)了很多算法，結果連初始化都做不出來…，但也有可能是考慮太多很極端的case (結果根本沒有這些東西)，在Alpha Test甚至沒有繳出成績。我那時候很常懷疑到底是方法不對，或是還沒把這個方法做到透徹。這個過程中結構有嘗試過sequence pair, corner block list，算法有SA, GA, 分治等等。做選擇其實十分困難，每次嘗試都會不知道到底是我沒寫好還是方法不對(不適合套用在我們的問題上)。
Alpha test的目標以快速寫完為考量，雖然來不及參與alpha test，但在alpha之後不久，我們也成功交出有效的成績。大部分隊伍的結果都比我們的好，我們的初始結果甚至無法列入排名。這時候的算法雛形雖然跟現在差不多，但少了很多優化(速度上和結果上)。這時候的作法只有單純的SP+SA，實作細節還不太好，效率上自然也不會太高。
再來就是不斷把結果變得更好，與老師討論，修正我們的錯誤。優化進行了一個多月，Beta Test 的時候已經在排名結果上(前五名)。 得到Beta Test的結果後，當時想做的優化也近乎完成了。從此開始每一步都異常困難，光是找到還可以進步的地方就得做許多實驗測試，進步的幅度也開始從原本的5%~10%變成了1%~2%。程式碼也開始變得複雜(我寫得超亂，要在上千行的程式碼翻來翻去找地方優化真的超笨==)，會缺乏動力去做更多的實驗和測試，用「說不定這個方法只能做到這樣」的心態去忽視一些可能性。在final前，我們還是加上了一些東西，像是平行化的處理，分階段的SA，收斂速度的調整等， @Ice Frost 也做了一些後處理讓結果好了一點，也把大部分beta的結果都刷掉了。
經過最後一週，我們提交了final的程式碼。過了一兩個月，拿到了最終結果。結果大家都在藏成績，beta跟final差超級多，每一項都10%左右，超級壞(但其實我們也有藏)。比賽到這邊就結束了，結果沒有RE，也沒有邊緣測資，我們一次跑6發的平行化也有被允許(?)。
後記：
比賽當下因為完全沒做rectilinear，有點可惜，所以後來繼續研究了一陣子，有成功把rectilinear的特性加進來優化，也成功把成績再推進一點點。
補充1: GA真的超沒用Zzz。
補充2: @Ice Frost 觀察Case10的關鍵貢獻讓後續的研究有進展。</description>
    </item>
  </channel>
</rss>
